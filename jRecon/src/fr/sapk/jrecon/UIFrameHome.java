/*
 This file is part of jRecon.

 jRecon is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 jRecon is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with jRecon.  If not, see <http://www.gnu.org/licenses/>.
 */
package fr.sapk.jrecon;

import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import prefuse.*;
import prefuse.action.ActionList;
import prefuse.action.RepaintAction;
import prefuse.action.assignment.ColorAction;
import prefuse.action.assignment.DataColorAction;
import prefuse.action.layout.graph.ForceDirectedLayout;
import prefuse.activity.Activity;
import prefuse.controls.DragControl;
import prefuse.controls.PanControl;
import prefuse.controls.ZoomControl;
import prefuse.data.Graph;
import prefuse.data.io.DataIOException;
import prefuse.data.io.GraphMLReader;
import prefuse.render.DefaultRendererFactory;
import prefuse.render.LabelRenderer;
import prefuse.util.ColorLib;
import prefuse.visual.VisualItem;

/**
 *
 * @author Antoine
 */
public class UIFrameHome extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public UIFrameHome() {
        initComponents();
        setIconImage(loadImageIcon("/img/icon.png").getImage());
        setResizable(false);
        //setName("jRecon");
        setTitle("jRecon");
    }

    /**
     * Returns an ImageIcon, or null if the path was invalid.
     */
    private static ImageIcon loadImageIcon(String path) {
        URL imgURL = UIFrameHome.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelAnalyse = new javax.swing.JPanel();
        ButtonGO = new javax.swing.JButton();
        InputTarget = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        CheckBoxPort = new javax.swing.JCheckBox();
        InputPort = new javax.swing.JTextField();
        CheckBoxLimit = new javax.swing.JCheckBox();
        InputLimit = new javax.swing.JTextField();
        CheckBoxDNS = new javax.swing.JCheckBox();
        InputName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextAreaEstimation = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        ButtonTest = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        bProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane.setAlignmentX(0.0F);
        jTabbedPane.setAlignmentY(0.0F);
        jTabbedPane.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTabbedPane.setMinimumSize(new java.awt.Dimension(506, 200));
        jTabbedPane.setPreferredSize(new java.awt.Dimension(506, 300));

        ButtonGO.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ButtonGO.setText("GO !");
        ButtonGO.setToolTipText("");
        ButtonGO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonGOActionPerformed(evt);
            }
        });

        InputTarget.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        InputTarget.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                InputTargetKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("IP Range \\ Hostname :");

        CheckBoxPort.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CheckBoxPort.setText("Port scan");
        CheckBoxPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxPortActionPerformed(evt);
            }
        });

        InputPort.setEditable(false);
        InputPort.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        InputPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                InputPortKeyReleased(evt);
            }
        });

        CheckBoxLimit.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CheckBoxLimit.setText("Limitation");
        CheckBoxLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxLimitActionPerformed(evt);
            }
        });

        InputLimit.setEditable(false);
        InputLimit.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        InputLimit.setText("10");
        InputLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputLimitActionPerformed(evt);
            }
        });
        InputLimit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                InputLimitKeyReleased(evt);
            }
        });

        CheckBoxDNS.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CheckBoxDNS.setText("DNS Resolution");
        CheckBoxDNS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxDNSActionPerformed(evt);
            }
        });

        InputName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        InputName.setToolTipText("Nom de l'analyse");

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Estimation", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("5x5 Pixel", 0, 14)))); // NOI18N

        TextAreaEstimation.setEditable(false);
        TextAreaEstimation.setBackground(new java.awt.Color(111, 111, 111));
        TextAreaEstimation.setColumns(20);
        TextAreaEstimation.setFont(new java.awt.Font("Miriam Fixed", 0, 12)); // NOI18N
        TextAreaEstimation.setLineWrap(true);
        TextAreaEstimation.setRows(5);
        TextAreaEstimation.setText("Config. invalid");
        TextAreaEstimation.setWrapStyleWord(true);
        TextAreaEstimation.setAutoscrolls(false);
        TextAreaEstimation.setFocusable(false);
        jScrollPane2.setViewportView(TextAreaEstimation);

        javax.swing.GroupLayout jPanelAnalyseLayout = new javax.swing.GroupLayout(jPanelAnalyse);
        jPanelAnalyse.setLayout(jPanelAnalyseLayout);
        jPanelAnalyseLayout.setHorizontalGroup(
            jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAnalyseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(InputName)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelAnalyseLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(InputTarget))
                    .addGroup(jPanelAnalyseLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelAnalyseLayout.createSequentialGroup()
                                .addComponent(CheckBoxDNS)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAnalyseLayout.createSequentialGroup()
                                .addGroup(jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CheckBoxPort)
                                    .addComponent(CheckBoxLimit))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(InputPort, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                    .addComponent(InputLimit)))
                            .addComponent(ButtonGO, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10))
        );
        jPanelAnalyseLayout.setVerticalGroup(
            jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelAnalyseLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(InputName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(InputTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelAnalyseLayout.createSequentialGroup()
                        .addGroup(jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CheckBoxPort)
                            .addComponent(InputPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CheckBoxLimit)
                            .addComponent(InputLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CheckBoxDNS)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonGO, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(10, 10, 10))
        );

        jTabbedPane.addTab("Analyse", jPanelAnalyse);

        jPanel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        ButtonTest.setText("Test");
        ButtonTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(436, Short.MAX_VALUE)
                .addComponent(ButtonTest)
                .addGap(64, 64, 64))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(ButtonTest)
                .addContainerGap(169, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Results", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 528, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 241, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("Logs", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CheckBoxPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxPortActionPerformed
        if (CheckBoxPort.isSelected()) {
            InputPort.setEditable(true);
        } else {
            InputPort.setEditable(false);
        }

        Estimate();
    }//GEN-LAST:event_CheckBoxPortActionPerformed

    private void CheckBoxLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxLimitActionPerformed
        if (CheckBoxLimit.isSelected()) {
            InputLimit.setEditable(true);
        } else {
            InputLimit.setEditable(false);
        }

        Estimate();
    }//GEN-LAST:event_CheckBoxLimitActionPerformed

    private void ButtonGOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonGOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonGOActionPerformed

    private void InputTargetKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputTargetKeyReleased
        Estimate();
    }//GEN-LAST:event_InputTargetKeyReleased

    private void InputPortKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputPortKeyReleased
        Estimate();
    }//GEN-LAST:event_InputPortKeyReleased

    private void InputLimitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputLimitKeyReleased
        Estimate();
    }//GEN-LAST:event_InputLimitKeyReleased

    private void CheckBoxDNSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxDNSActionPerformed
        Estimate();
    }//GEN-LAST:event_CheckBoxDNSActionPerformed

    private void InputLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputLimitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputLimitActionPerformed

    private void ButtonTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonTestActionPerformed
        // TODO add your handling code here:
        System.out.println("Test starting ...");
        Graph graph = null;
        try {
            graph = new GraphMLReader().readGraph("data/socialnet.xml");
        } catch (DataIOException e) {
            e.printStackTrace();
            System.err.println("Error loading graph. Exiting...");
            System.exit(1);
        }
        Visualization vis = new Visualization();
        vis.add("graph", graph);

        LabelRenderer r = new LabelRenderer("name");
        r.setRoundedCorner(8, 8);

        vis.setRendererFactory(new DefaultRendererFactory(r));
// create our nominal color palette
// pink for females, baby blue for males
        int[] palette = new int[]{
            ColorLib.rgb(255, 180, 180), ColorLib.rgb(190, 190, 255)
        };
// map nominal data values to colors using our provided palette
        DataColorAction fill = new DataColorAction("graph.nodes", "gender",
                Constants.NOMINAL, VisualItem.FILLCOLOR, palette);
// use black for node text
        ColorAction text = new ColorAction("graph.nodes",
                VisualItem.TEXTCOLOR, ColorLib.gray(0));
// use light grey for edges
        ColorAction edges = new ColorAction("graph.edges",
                VisualItem.STROKECOLOR, ColorLib.gray(200));

// create an action list containing all color assignments
        ActionList color = new ActionList();
        color.add(fill);
        color.add(text);
        color.add(edges);

        // create an action list with an animated layout
// the INFINITY parameter tells the action list to run indefinitely
        ActionList layout = new ActionList(Activity.INFINITY);
        layout.add(new ForceDirectedLayout("graph"));
        layout.add(new RepaintAction());
        // add the actions to the visualization
        vis.putAction("color", color);
        vis.putAction("layout", layout);

        // create a new Display that pull from our Visualization
        Display display = new Display(vis);
        display.setSize(720, 500); // set display size
        display.addControlListener(new DragControl()); // drag items around
        display.addControlListener(new PanControl());  // pan with background left-drag
        display.addControlListener(new ZoomControl()); // zoom with vertical right-drag

        // create a new window to hold the visualization
        JFrame frame = new JFrame("Map");
// ensure application exits when window is closed
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(display);
        frame.pack();           // layout components in window
        frame.setVisible(true); // show the window

        vis.run("color");  // assign the colors
        vis.run("layout"); // start up the animated layout
        System.out.println("Test ended");
    }//GEN-LAST:event_ButtonTestActionPerformed

    private void Estimate() {
        //TODO check validity
        /*
         System.out.println(InputName.getText());
         System.out.println(InputLimit.getText());
         System.out.println(InputPort.getText());
         System.out.println(InputTarget.getText());
         System.out.println(Tool.is_network(InputTarget.getText()));
         System.out.println(Tool.is_hostname(InputTarget.getText()));
         */
        /*
         System.out.println(Integer.parseInt(InputTarget.getText().split("/")[1]));
         System.out.println(32 - Integer.parseInt(InputTarget.getText().split("/")[1]));
         System.out.println(Math.pow(2,32 - Integer.parseInt(InputTarget.getText().split("/")[1])));
         */
        if (Tool.is_network(InputTarget.getText()) || Tool.is_hostname(InputTarget.getText())) {
            double requests = 0;
            if (Tool.is_network(InputTarget.getText())) {
                requests += Math.pow(2, 32 - Integer.parseInt(InputTarget.getText().split("/")[1])) - 2;
            } else {
                requests += 1;
            }

            requests = (requests <= 0) ? 1 : requests;
            double multi = 0;
            if (CheckBoxPort.isSelected() && InputPort.getText().split("-").length == 2) {
                //TODO check validity of range
                multi += (Integer.parseInt(InputPort.getText().split("-")[1]) - Integer.parseInt(InputPort.getText().split("-")[0]) + 1);
            }
            if (CheckBoxDNS.isSelected()) {
                multi += 1;
            }

            //System.out.println(multi);
            //request étati multiplié par 10 pour les traceroute (moyenne)
            requests = 10 * requests + (requests) * multi;

            if (CheckBoxLimit.isSelected() && InputLimit.getText().length() > 0 && Double.parseDouble(InputLimit.getText()) > 0) {
                multi = 1 / (Double.parseDouble(InputLimit.getText()));
                //TODO implement multitreading request
            } else {
                multi = 0.1;
            }

            String time = String.format("%dh%02dm%02ds", (int) (requests * multi) / 3600, ((int) (requests * multi) % 3600) / 60, ((int) (requests * multi) % 60));
            //System.out.println(requests);
            TextAreaEstimation.setText("\n\n"
                    + "Number of request : " + Compact(requests) + "Req\n"
                    + "\n"
                    + "Space required    : " + Compact(requests * 12) + "B\n"
                    + "\n"
                    + "Estimated time : " + time);
        } else {
            TextAreaEstimation.setText("\n\n"
                    + "Config. invalid");
        }
    }

    private String Compact(double n) {
        char c = ' ';
        if (n > 10000) {
            n = n / 1000;
            c = 'K';
        }
        if (n > 10000) {
            n = n / 1000;
            c = 'M';
        }
        if (n > 10000) {
            n = n / 1000;
            c = 'G';
        }
        return (int) n + " " + c;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*
         try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
         if ("Nimbus".equals(info.getName())) {
         javax.swing.UIManager.setLookAndFeel(info.getClassName());
         break;
         }
         }
         } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(UIFrameHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(UIFrameHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(UIFrameHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(UIFrameHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         }
         */
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UIFrameHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton ButtonGO;
    private javax.swing.JButton ButtonTest;
    private javax.swing.JCheckBox CheckBoxDNS;
    private javax.swing.JCheckBox CheckBoxLimit;
    private javax.swing.JCheckBox CheckBoxPort;
    private javax.swing.JTextField InputLimit;
    private javax.swing.JTextField InputName;
    private javax.swing.JTextField InputPort;
    private javax.swing.JTextField InputTarget;
    private javax.swing.JTextArea TextAreaEstimation;
    public javax.swing.JProgressBar bProgressBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelAnalyse;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane;
    // End of variables declaration//GEN-END:variables

    void disableAll() {
        setAll(false);
    }

    void enableAll() {
        setAll(true);
    }

    void setAll(boolean state) {
        ButtonGO.setEnabled(state);
        CheckBoxDNS.setEnabled(state);
        CheckBoxLimit.setEnabled(state);
        CheckBoxPort.setEnabled(state);
        InputLimit.setEnabled(state);
        InputName.setEnabled(state);
        InputPort.setEnabled(state);
        InputTarget.setEnabled(state);
        TextAreaEstimation.setEnabled(state);
    }

    boolean config_is_valid() {
        if (InputPort.getText().matches("^[0-9]+$")) {
            InputPort.setText(InputPort.getText() + "-" + InputPort.getText());
        }
        Estimate();
        return !TextAreaEstimation.getText().contains("Config. invalid");
    }

    String[] get_config() {
        return new String[]{
            InputName.getText(),
            InputTarget.getText().toLowerCase(),
            ((CheckBoxPort.isSelected()) ? InputPort.getText() : null),
            ((CheckBoxLimit.isSelected()) ? InputLimit.getText() : "10"),
            ((CheckBoxDNS.isSelected()) ? "true" : "false")
        };
    }

}
